
X_train, X_val, y_train , y_val = train_test_split(X, y, test_size=0.2)

#Defining labels 

def get_label(self, argument):
	labels = {0:'Happy', 1:'Sad'}
	return(labels.get(argument, "Invalid emotion"))


model = Sequential()




model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 3)))
#Adding more layers
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
# Flattening
model.add(Flatten())
# Adding fully connected layer
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(10, activation='softmax'))

model.compile( loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
model.summary()

batch_size=256
epochs =200

history = model.fit( X_train,y_train, epochs=epochs, batch_size = batch_size , validation_split=0.1, verbose = 1, shuffle=True )

model.evaluate(X_test, y_test)


#resize plots
plt.figure(figsize=[6,4])
# Display random image from training data
plt.subplot(1,3,1)
plt.imshow(np.squeeze(X_train[2]),cmap='gray')
plt.title("entrainement : {}".format(get_label(int(y_train[2])) ) )

# Display random image from testing data
plt.subplot(1,3,3)
plt.imshow(np.squeeze(X_test[4]),cmap='gray')
plt.title("test : {}".format(get_label(int(y_test[2])) ) )

